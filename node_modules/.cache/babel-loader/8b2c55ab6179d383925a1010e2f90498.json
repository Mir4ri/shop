{"ast":null,"code":"import _objectSpread from \"/home/deliciae/Desktop/broot-shop/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { init } from \"@rematch/core\";\nimport immerPlugin from \"@rematch/immer\";\nimport models from \"./models\";\nimport { loadStateFromLocalStorage, saveStateToLocalStorage } from \"./models/cart\";\nimport { loadStateFromLocalStorageWishlist, saveStateToLocalStorageWishlist } from \"./models/wishlist\";\nvar immer = immerPlugin();\n\nvar logger = function logger(store) {\n  return function (next) {\n    return function (action) {\n      console.log(\"dispatching\", action);\n      var result = next(action);\n      console.log(\"next state\", store.getState());\n      return result;\n    };\n  };\n};\n\nvar store = init({\n  models: models,\n  plugins: [immer],\n  redux: {\n    initialState: {\n      cart: loadStateFromLocalStorage(),\n      wishlist: loadStateFromLocalStorageWishlist()\n    },\n    middlewares: [logger]\n  }\n});\nstore.subscribe(function () {\n  saveStateToLocalStorage(store);\n});\nwindow.store = store; // Hot reloading\n\nif (module.hot) {\n  // Reload rematch models\n  module.hot.accept(\"./models\", function () {\n    Object.keys(models).forEach(function (modelKey) {\n      console.log(\"Reloading model \".concat(modelKey));\n      store.model(_objectSpread({\n        name: modelKey\n      }, models[modelKey]));\n    });\n  });\n}\n\nexport default store;","map":{"version":3,"sources":["/home/deliciae/Desktop/broot-shop/src/store.js"],"names":["init","immerPlugin","models","loadStateFromLocalStorage","saveStateToLocalStorage","loadStateFromLocalStorageWishlist","saveStateToLocalStorageWishlist","immer","logger","store","next","action","console","log","result","getState","plugins","redux","initialState","cart","wishlist","middlewares","subscribe","window","module","hot","accept","Object","keys","forEach","modelKey","model","name"],"mappings":";AAAA,SAASA,IAAT,QAAqB,eAArB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AAEA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,SACEC,yBADF,EAEEC,uBAFF,QAGO,eAHP;AAKA,SACEC,iCADF,EAEEC,+BAFF,QAGO,mBAHP;AAKA,IAAMC,KAAK,GAAGN,WAAW,EAAzB;;AACA,IAAMO,MAAM,GAAG,SAATA,MAAS,CAAAC,KAAK;AAAA,SAAI,UAAAC,IAAI;AAAA,WAAI,UAAAC,MAAM,EAAI;AACxCC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BF,MAA3B;AACA,UAAIG,MAAM,GAAGJ,IAAI,CAACC,MAAD,CAAjB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BJ,KAAK,CAACM,QAAN,EAA1B;AACA,aAAOD,MAAP;AACD,KAL2B;AAAA,GAAR;AAAA,CAApB;;AAOA,IAAML,KAAK,GAAGT,IAAI,CAAC;AACjBE,EAAAA,MAAM,EAANA,MADiB;AAEjBc,EAAAA,OAAO,EAAE,CAACT,KAAD,CAFQ;AAGjBU,EAAAA,KAAK,EAAE;AACLC,IAAAA,YAAY,EAAE;AACZC,MAAAA,IAAI,EAAEhB,yBAAyB,EADnB;AAEZiB,MAAAA,QAAQ,EAAEf,iCAAiC;AAF/B,KADT;AAKLgB,IAAAA,WAAW,EAAE,CAACb,MAAD;AALR;AAHU,CAAD,CAAlB;AAYAC,KAAK,CAACa,SAAN,CAAgB,YAAM;AACpBlB,EAAAA,uBAAuB,CAACK,KAAD,CAAvB;AACD,CAFD;AAIAc,MAAM,CAACd,KAAP,GAAeA,KAAf,C,CAEA;;AACA,IAAIe,MAAM,CAACC,GAAX,EAAgB;AACd;AACAD,EAAAA,MAAM,CAACC,GAAP,CAAWC,MAAX,CAAkB,UAAlB,EAA8B,YAAM;AAClCC,IAAAA,MAAM,CAACC,IAAP,CAAY1B,MAAZ,EAAoB2B,OAApB,CAA4B,UAAAC,QAAQ,EAAI;AACtClB,MAAAA,OAAO,CAACC,GAAR,2BAA+BiB,QAA/B;AACArB,MAAAA,KAAK,CAACsB,KAAN;AACEC,QAAAA,IAAI,EAAEF;AADR,SAEK5B,MAAM,CAAC4B,QAAD,CAFX;AAID,KAND;AAOD,GARD;AASD;;AAED,eAAerB,KAAf","sourcesContent":["import { init } from \"@rematch/core\";\nimport immerPlugin from \"@rematch/immer\";\n\nimport models from \"./models\";\n\nimport {\n  loadStateFromLocalStorage,\n  saveStateToLocalStorage\n} from \"./models/cart\";\n\nimport {\n  loadStateFromLocalStorageWishlist,\n  saveStateToLocalStorageWishlist\n} from \"./models/wishlist\";\n\nconst immer = immerPlugin();\nconst logger = store => next => action => {\n  console.log(\"dispatching\", action);\n  let result = next(action);\n  console.log(\"next state\", store.getState());\n  return result;\n};\n\nconst store = init({\n  models,\n  plugins: [immer],\n  redux: {\n    initialState: {\n      cart: loadStateFromLocalStorage(),\n      wishlist: loadStateFromLocalStorageWishlist()\n    },\n    middlewares: [logger]\n  }\n});\n\nstore.subscribe(() => {\n  saveStateToLocalStorage(store);\n});\n\nwindow.store = store;\n\n// Hot reloading\nif (module.hot) {\n  // Reload rematch models\n  module.hot.accept(\"./models\", () => {\n    Object.keys(models).forEach(modelKey => {\n      console.log(`Reloading model ${modelKey}`);\n      store.model({\n        name: modelKey,\n        ...models[modelKey]\n      });\n    });\n  });\n}\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}